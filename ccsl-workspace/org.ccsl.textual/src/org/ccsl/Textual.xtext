// automatically generated by Xtext
grammar org.ccsl.Textual with org.eclipse.xtext.common.Terminals


import "http://www.eclipse.org/emf/2003/XMLType" as type
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "classpath:/model/ccsl.ecore" as ccsl
import "classpath:/model/ccsl.ecore#//elements" as elements
import "classpath:/model/ccsl.ecore#//context" as context
import "classpath:/model/ccsl.ecore#//elements/expressions/annotation" as annotation
import "classpath:/model/ccsl.ecore#//elements/namedElements/complexType" as complexType
import "classpath:/model/ccsl.ecore#//elements/expressions" as expressions
import "classpath:/model/ccsl.ecore#//elements/namedElements/variable" as variable
import "classpath:/model/ccsl.ecore#//elements/datatype" as datatype
import "classpath:/model/ccsl.ecore#//elements/expressions/invocations" as invocations
import "classpath:/model/ccsl.ecore#//elements/namedElements/method" as method
import "classpath:/model/ccsl.ecore#//elements/expressions/arrays" as arrays
import "classpath:/model/ccsl.ecore#//elements/expressions/assignment" as assignment
import "classpath:/model/ccsl.ecore#//elements/expressions/literals" as literals
import "classpath:/model/ccsl.ecore#//elements/namedElements" as namedElements
import "classpath:/model/ccsl.ecore#//functions/numberFunctions" as numberFunctions
import "classpath:/model/ccsl.ecore#//elements/statements" as statements
import "classpath:/model/ccsl.ecore#//functions" as functions
import "classpath:/model/ccsl.ecore#//elements/statements/tryCatch" as tryCatch
import "classpath:/model/ccsl.ecore#//elements/statements/import" as import0
import "classpath:/model/ccsl.ecore#//elements/statements/controlFlow" as controlFlow
import "classpath:/model/ccsl.ecore#//functions/booleanFunctions" as booleanFunctions
import "classpath:/model/ccsl.ecore#//functions/booleanFunctions/filters" as filters
import "classpath:/model/ccsl.ecore#//elements/expressions/accesses" as accesses



Rule returns ccsl::Rule:
	CompositeRule | AtomicRule;






Filter returns filters::Filter:
	AtomicFilter_Impl | CompositeFilter | PropertyFilter | TemplateFilter_Impl | SameNameFilter | CountFilter | RegexMatch | ImplicityOperandFilter | ImplicityContainerFilter | IsKindOfFilter | SuperMethodClosureFilter | IsTypeOfFilter | ChildClosureComplexTypeFilter | IsStringFilter | FromClosureFilter | HasSuperClassFilter | BlockLastStatementFilter | HasSameReferenceFilter | IsEmptyBlockFilter | ImplicitContentsFilter;





TypeDeclaration returns complexType::TypeDeclaration:
	TypeDeclaration_Impl | JInterface | JClass | AnnotationType | JEnum | ComplexTypeDeclaration_Impl | ConstructComplexTypeDeclaration_Impl;


Expression returns expressions::Expression:
	Expression_Impl | VarDeclaration | CastExpression | TernaryExpression | InstanceofExpression | ArithmeticExpression | StringConcatenation | BooleanExpression | BinaryExpression | OperandExpression_Impl | Access /*ADDED */ | Invocation | ArrayInitializer | ArrayIndexesAccess | ArrayCreation | SimpleAssignment | LiteralValue;


DataType returns datatype::DataType:
	DataType_Impl | PrimitiveType_Impl | BooleanPrimitiveType | ShortPrimitiveType | ObjectType_Impl | ParameterizedType | IntPrimitiveType | ArrayType | VoidType | TypeParameter | WildCardType | BytePrimitiveType | CharPrimitiveType | DoublePrimitiveType | FloatPrimitiveType | LongPrimitiveType;



Access returns accesses::Access:
	VariableAccess | DataTypeAccess | Access_Impl;


ObjectType returns datatype::ObjectType:
	ObjectType_Impl | ParameterizedType | ArrayType | TypeParameter | WildCardType;

Variable returns variable::Variable:
	Variable_Impl | ParameterVariable | LocalVariable | InitializableVariable_Impl | FieldVariable;

Statement returns statements::Statement:
	Statement_Impl | ControlFlowStatement | Block | InstanceCreation | SynchronizedBlock | ThrowStatement | EmptyStatement | ReturnStatement | BreakStatement | ContinueStatement | AssertStatement | ExpressionStatement | LabelStatement |/*ADDED */ TryStatement | CatchClause;

NamedElement returns namedElements::NamedElement:
	NamedElement_Impl | Package | TypeDeclaration_Impl | Variable | Method;

ComplexType returns complexType::ComplexType:
	ComplexType_Impl | JInterface | AnonymousClass | JClass | JEnum | ComplexTypeDeclaration_Impl | ConstructComplexTypeDeclaration_Impl;

CompositeRule returns ccsl::CompositeRule:
	'Composite'
	'{'
		negated?= 'not'?
		('operator' operator=LogicOperator)?
		'rules' '[' rules+=Rule ( "," rules+=Rule)* ']' 
	'}';

AtomicRule returns ccsl::AtomicRule:
	'Atomic'
	'{'
		negated?= 'not'?
		'context' context=Context
		'subject' subject=[elements::Element|EString]?
	'}';

Boolean returns type::Boolean:
	EBoolean;

enum LogicOperator returns ccsl::LogicOperator:
				AND = 'AND' | OR = 'OR';

Element returns elements::Element:
	{elements::Element}
	uniqueName= EString | ControlledAccessElement | NamedElement | Statement | ComplexType | DataType | ImportableElement | Expression |  SimpleMethod | AnnotationFieldValue;
	

Context returns context::Context:
	{context::Context}
	'{'
		('contextElements' '[' contextElements+=Element ( "," contextElements+=Element)* ']' )?
		('filters' '[' filters+=Filter ( "," filters+=Filter)* ']' )?
	'}';

String0 returns type::String:
	STRING;
	
ID0 returns type::ID:
	ID;

enum Visibility returns elements::Visibility:
				PRIVATE = 'PRIVATE' | PACKAGE = 'PACKAGE' | PROTECTED = 'PROTECTED' | PUBLIC = 'PUBLIC' | ANY = 'ANY';
				
enum AssignmentOperator returns assignment::AssignmentOperator:
				PLUS_ASSIGN = 'PLUS_ASSIGN' | ASSIGN = 'ASSIGN' | ANY = 'ANY';
				
enum UnaryAssignmentOperator returns assignment::UnaryAssignmentOperator:
				DECREMENT = 'DECREMENT' | INCREMENT = 'INCREMENT' | ANY = 'ANY';
				
enum UnaryAssignmentKind returns assignment::UnaryAssignmentKind:
				POST = 'POST' | PRE = 'PRE' | ANY = 'ANY';
				

Annotation returns annotation::Annotation:
	{annotation::Annotation}
	'Annotation'
	uniqueName=ID0?
	'{'
		('valuesKind' valuesKind=CollectionKind)?
		('type' type=[complexType::AnnotationType|EString])?
		('values' '[' values+=AnnotationFieldValue ( "," values+=AnnotationFieldValue)* ']' )?
	'}';

AnnotationType returns complexType::AnnotationType:
	{complexType::AnnotationType}
	'AnnotationType'
	uniqueName=ID0?
	'{'
		('name' name=String0)?
		('availableInSourceCode' availableInSourceCode=BooleanObject)?
		('visibility' visibility=Visibility)?
		('static' static=BooleanObject)?
		('inheritance' inheritance=Inheritance)?
		('annotations' '[' annotations+=Annotation ( "," annotations+=Annotation)* ']' )?
		('imports' '[' imports+=ImportStatement ( "," imports+=ImportStatement)* ']' )?
		('nestedTypes' '[' nestedTypes+=TypeDeclaration ( "," nestedTypes+=TypeDeclaration)* ']' )?
		('fields' '[' fields+=AnnotationField ( "," fields+=AnnotationField)* ']' )?
	'}';

AnnotationFieldValue returns annotation::AnnotationFieldValue:
	{annotation::AnnotationFieldValue}
	'AnnotationFieldValue'
	uniqueName=ID0?
	'{'
		('field' field=[complexType::AnnotationField|EString])?
		('value' value=Expression)?
	'}';

enum CollectionKind returns ccsl::CollectionKind:
				EXACT = 'EXACT' | SEQUENCE = 'SEQUENCE' | ANY = 'ANY' | IMMEDIATE = 'IMMEDIATE';

BooleanObject returns type::BooleanObject:
	EBoolean;

ImportStatement returns import0::ImportStatement:
	{import0::ImportStatement}
	(static?='static')?
	'ImportStatement'
	uniqueName=ID0?
	'{'
		('importedElement' importedElement=[import0::ImportableElement|EString])?
	'}';

TypeDeclaration_Impl returns complexType::TypeDeclaration:
	{complexType::TypeDeclaration}
	'TypeDeclaration'
	uniqueName=ID0?
	'{'
		('name' name=String0)?
		('availableInSourceCode' availableInSourceCode=BooleanObject)?
		('visibility' visibility=Visibility)?
		('static' static=BooleanObject)?
		('inheritance' inheritance=Inheritance)?
		('annotations' '[' annotations+=Annotation ( "," annotations+=Annotation)* ']' )?
		('imports' '[' imports+=ImportStatement ( "," imports+=ImportStatement)* ']' )?
		('nestedTypes' '[' nestedTypes+=TypeDeclaration ( "," nestedTypes+=TypeDeclaration)* ']' )?
	'}';

enum Inheritance returns elements::Inheritance:
				ABSTRACT = 'ABSTRACT' | FINAL = 'FINAL' | NONE = 'NONE' | ANY = 'ANY';

AnnotationField returns complexType::AnnotationField:
	{complexType::AnnotationField}
	'AnnotationField'
	uniqueName=ID0?
	'{'
		('name' name=String0)?
		('availableInSourceCode' availableInSourceCode=BooleanObject)?
		('type' type=[datatype::DataType|EString])?
		('annotations' '[' annotations+=Annotation ( "," annotations+=Annotation)* ']' )?
		('default' default=Expression)?
	'}';

ImportableElement returns import0::ImportableElement:
	{import0::ImportableElement}
	'ImportableElement'
	uniqueName=ID0?;

EBoolean returns ecore::EBoolean:
    'true' | 'false';

JInterface returns complexType::JInterface:
	{complexType::JInterface}
	'JInterface'
	uniqueName=ID0?
	'{'
		('name' name=String0)?
		('availableInSourceCode' availableInSourceCode=BooleanObject)?
		('visibility' visibility=Visibility)?
		('static' static=BooleanObject)?
		('inheritance' inheritance=Inheritance)?
		('fieldsKind' fieldsKind=CollectionKind)?
		('methodsKind' methodsKind=CollectionKind)?
		('superInterfaces' '(' superInterfaces+=[complexType::JInterface|EString] ( "," superInterfaces+=[complexType::JInterface|EString])* ')' )?
		('annotations' '[' annotations+=Annotation ( "," annotations+=Annotation)* ']' )?
		('imports' '[' imports+=ImportStatement ( "," imports+=ImportStatement)* ']' )?
		('nestedTypes' '[' nestedTypes+=TypeDeclaration ( "," nestedTypes+=TypeDeclaration)* ']' )?
		('fields' '[' fields+=FieldVariable ( "," fields+=FieldVariable)* ']' )?
		('methods' '[' methods+=Method ( "," methods+=Method)* ']' )?
	'}';

JClass returns complexType::JClass:
	{complexType::JClass}
	'JClass'
	uniqueName=ID0?
	'{'
		('name' name=String0)?
		('availableInSourceCode' availableInSourceCode=BooleanObject)?
		('visibility' visibility=Visibility)?
		('static' static=BooleanObject)?
		('inheritance' inheritance=Inheritance)?
		('fieldsKind' fieldsKind=CollectionKind)?
		('methodsKind' methodsKind=CollectionKind)?
		('superInterfaces' '(' superInterfaces+=[complexType::JInterface|EString] ( "," superInterfaces+=[complexType::JInterface|EString])* ')' )?
		('superClass' superClass=[complexType::JClass|EString])?
		('annotations' '[' annotations+=Annotation ( "," annotations+=Annotation)* ']' )?
		('imports' '[' imports+=ImportStatement ( "," imports+=ImportStatement)* ']' )?
		('nestedTypes' '[' nestedTypes+=TypeDeclaration ( "," nestedTypes+=TypeDeclaration)* ']' )?
		('fields' '[' fields+=FieldVariable ( "," fields+=FieldVariable)* ']' )?
		('methods' '[' methods+=Method ( "," methods+=Method)* ']' )?
		('constructors' '[' constructors+=Constructor ( "," constructors+=Constructor)* ']' )?
	'}';

JEnum returns complexType::JEnum:
	{complexType::JEnum}
	'JEnum'
	uniqueName=ID0?
	'{'
		('name' name=String0)?
		('availableInSourceCode' availableInSourceCode=BooleanObject)?
		('visibility' visibility=Visibility)?
		('static' static=BooleanObject)?
		('inheritance' inheritance=Inheritance)?
		('fieldsKind' fieldsKind=CollectionKind)?
		('methodsKind' methodsKind=CollectionKind)?
		('superInterfaces' '(' superInterfaces+=[complexType::JInterface|EString] ( "," superInterfaces+=[complexType::JInterface|EString])* ')' )?
		('annotations' '[' annotations+=Annotation ( "," annotations+=Annotation)* ']' )?
		('imports' '[' imports+=ImportStatement ( "," imports+=ImportStatement)* ']' )?
		('nestedTypes' '[' nestedTypes+=TypeDeclaration ( "," nestedTypes+=TypeDeclaration)* ']' )?
		('fields' '[' fields+=FieldVariable ( "," fields+=FieldVariable)* ']' )?
		('methods' '[' methods+=Method ( "," methods+=Method)* ']' )?
		('constructors' '[' constructors+=Constructor ( "," constructors+=Constructor)* ']' )?
		('enumConstants' '[' enumConstants+=EnumConstant ( "," enumConstants+=EnumConstant)* ']' )?
	'}';

ComplexTypeDeclaration_Impl returns complexType::ComplexTypeDeclaration:
	{complexType::ComplexTypeDeclaration}
	'ComplexTypeDeclaration'
	uniqueName=ID0?
	'{'
		('name' name=String0)?
		('availableInSourceCode' availableInSourceCode=BooleanObject)?
		('visibility' visibility=Visibility)?
		('static' static=BooleanObject)?
		('inheritance' inheritance=Inheritance)?
		('fieldsKind' fieldsKind=CollectionKind)?
		('methodsKind' methodsKind=CollectionKind)?
		('superInterfaces' '(' superInterfaces+=[complexType::JInterface|EString] ( "," superInterfaces+=[complexType::JInterface|EString])* ')' )?
		('annotations' '[' annotations+=Annotation ( "," annotations+=Annotation)* ']' )?
		('imports' '[' imports+=ImportStatement ( "," imports+=ImportStatement)* ']' )?
		('nestedTypes' '[' nestedTypes+=TypeDeclaration ( "," nestedTypes+=TypeDeclaration)* ']' )?
		('fields' '[' fields+=FieldVariable ( "," fields+=FieldVariable)* ']' )?
		('methods' '[' methods+=Method ( "," methods+=Method)* ']' )?
	'}';

ConstructComplexTypeDeclaration_Impl returns complexType::ConstructComplexTypeDeclaration:
	{complexType::ConstructComplexTypeDeclaration}
	'ConstructComplexTypeDeclaration'
	uniqueName=ID0?
	'{'
		('name' name=String0)?
		('availableInSourceCode' availableInSourceCode=BooleanObject)?
		('visibility' visibility=Visibility)?
		('static' static=BooleanObject)?
		('inheritance' inheritance=Inheritance)?
		('fieldsKind' fieldsKind=CollectionKind)?
		('methodsKind' methodsKind=CollectionKind)?
		('superInterfaces' '(' superInterfaces+=[complexType::JInterface|EString] ( "," superInterfaces+=[complexType::JInterface|EString])* ')' )?
		('annotations' '[' annotations+=Annotation ( "," annotations+=Annotation)* ']' )?
		('imports' '[' imports+=ImportStatement ( "," imports+=ImportStatement)* ']' )?
		('nestedTypes' '[' nestedTypes+=TypeDeclaration ( "," nestedTypes+=TypeDeclaration)* ']' )?
		('fields' '[' fields+=FieldVariable ( "," fields+=FieldVariable)* ']' )?
		('methods' '[' methods+=Method ( "," methods+=Method)* '}' )?
		('constructors' '[' constructors+=Constructor ( "," constructors+=Constructor)* ']' )?
	'}';

FieldVariable returns variable::FieldVariable:
	{variable::FieldVariable}
	'FieldVariable'
	uniqueName=ID0?
	'{'
		('name' name=String0)?
		('availableInSourceCode' availableInSourceCode=BooleanObject)?
		('final' final=BooleanObject)?
		('visibility' visibility=Visibility)?
		('static' static=BooleanObject)?
		('volatile' volatile=BooleanObject)?
		('type' type=[datatype::DataType|EString])?
		('annotations' '[' annotations+=Annotation ( "," annotations+=Annotation)* ']' )?
		('initialValue' initialValue=Expression)?
	'}';

Method returns method::Method:
	{method::Method}
	'Method'
	uniqueName=ID0?
	'{'
		(
			('name' name=String0)?
			&('availableInSourceCode' availableInSourceCode=BooleanObject)?
			&('visibility' visibility=Visibility)?
			&('paramsKind' paramsKind=CollectionKind)?
			&('static' static=BooleanObject)?
			&('inheritance' inheritance=Inheritance)?
			&('thrownExceptions' '(' thrownExceptions+=[complexType::JClass|EString] ( "," thrownExceptions+=[complexType::JClass|EString])* ')' )?
			&('returnType' returnType=[datatype::DataType|EString])?
			&('annotations' '[' annotations+=Annotation ( "," annotations+=Annotation)* ']' )?
			&('params' '[' params+=ParameterVariable ( "," params+=ParameterVariable)* ']' )?
			&('body' body=Block)?
		)
	'}';

/*SimpleMethod added manually */

SimpleMethod returns method::SimpleMethod:
	{method::SimpleMethod}
	'SimpleMethod'
	uniqueName=ID0?
	'{'
		(
			('visibility' visibility=Visibility)?
			&('paramsKind' paramsKind=CollectionKind)?
			&('params' '[' params+=ParameterVariable ( "," params+=ParameterVariable)* ']' )?
			&('body' body=Block)?
		)
	'}'/* | Method */ ;

DataType_Impl returns datatype::DataType:
	{datatype::DataType}
	'DataType'
	uniqueName=EString?;

Expression_Impl returns expressions::Expression:
	{expressions::Expression}
	'Expression'
	uniqueName=ID0?;

PrimitiveType_Impl returns datatype::PrimitiveType:
	{datatype::PrimitiveType}
	'PrimitiveType'
	uniqueName=ID0?;

BooleanPrimitiveType returns datatype::BooleanPrimitiveType:
	{datatype::BooleanPrimitiveType}
	'BooleanPrimitiveType'
	uniqueName=ID0?;

ShortPrimitiveType returns datatype::ShortPrimitiveType:
	{datatype::ShortPrimitiveType}
	'ShortPrimitiveType'
	uniqueName=ID0?;

ObjectType_Impl returns datatype::ObjectType:
	{datatype::ObjectType}
	'ObjectType'
	uniqueName=ID0?;

ParameterizedType returns datatype::ParameterizedType:
	{datatype::ParameterizedType}
	'ParameterizedType'
	uniqueName=ID0?
	'{'
		('typeArguments' '(' typeArguments+=[datatype::ObjectType|EString] ( "," typeArguments+=[datatype::ObjectType|EString])* ')' )?
		('type' type=[complexType::TypeDeclaration|EString])?
	'}';

IntPrimitiveType returns datatype::IntPrimitiveType:
	{datatype::IntPrimitiveType}
	'IntPrimitiveType'
	uniqueName=ID0?;

ArrayType returns datatype::ArrayType:
	{datatype::ArrayType}
	'ArrayType'
	uniqueName=ID0?
	'{'
		('dimensions' dimensions=Int0)?
		('type' type=[datatype::DataType|EString])?
	'}';

VoidType returns datatype::VoidType:
	{datatype::VoidType}
	'VoidType'
	uniqueName=ID0?;

TypeParameter returns datatype::TypeParameter:
	{datatype::TypeParameter}
	'TypeParameter'
	uniqueName=ID0?
	'{'
		('boundsKind' boundsKind=CollectionKind)?
		('bounds' '(' bounds+=[datatype::ObjectType|EString] ( "," bounds+=[datatype::ObjectType|EString])* ')' )?
	'}';

WildCardType returns datatype::WildCardType:
	{datatype::WildCardType}
	'WildCardType'
	uniqueName=ID0?
	'{'
		('bound' bound=[datatype::ObjectType|EString])?
	'}';

BytePrimitiveType returns datatype::BytePrimitiveType:
	{datatype::BytePrimitiveType}
	'BytePrimitiveType'
	uniqueName=ID0?;

CharPrimitiveType returns datatype::CharPrimitiveType:
	{datatype::CharPrimitiveType}
	'CharPrimitiveType'
	uniqueName=ID0?;

DoublePrimitiveType returns datatype::DoublePrimitiveType:
	{datatype::DoublePrimitiveType}
	'DoublePrimitiveType'
	uniqueName=ID0?;

FloatPrimitiveType returns datatype::FloatPrimitiveType:
	{datatype::FloatPrimitiveType}
	'FloatPrimitiveType'
	uniqueName=ID0?;

LongPrimitiveType returns datatype::LongPrimitiveType:
	{datatype::LongPrimitiveType}
	'LongPrimitiveType'
	uniqueName=ID0?;

Int0 returns type::Int:
	INT;
	
/*terminal INT returns ecore::EInt: ('-'? '0'..'9')+; ? */

VarDeclaration returns expressions::VarDeclaration:
	{expressions::VarDeclaration}
	'VarDeclaration'
	uniqueName=ID0?
	'{'
		('variable' variable=Variable)?
	'}';

CastExpression returns expressions::CastExpression:
	{expressions::CastExpression}
	'CastExpression'
	uniqueName=ID0?
	'{'
		('type' type=[datatype::DataType|EString])?
		('expression' expression=Expression)?
	'}';

TernaryExpression returns expressions::TernaryExpression:
	{expressions::TernaryExpression}
	'TernaryExpression'
	uniqueName=ID0?
	'{'
		('condition' condition=Expression)?
		('elseExpression' elseExpression=Expression)?
		('thenExpression' thenExpression=Expression)?
	'}';

InstanceofExpression returns expressions::InstanceofExpression:
	{expressions::InstanceofExpression}
	'InstanceofExpression'
	uniqueName=ID0?
	'{'
		('type' type=[datatype::ObjectType|EString])?
		('objectExpression' objectExpression=Expression)?
	'}';

ArithmeticExpression returns expressions::ArithmeticExpression:
	{expressions::ArithmeticExpression}
	'ArithmeticExpression'
	uniqueName=ID0?
	'{'
		('kind' kind=ExpressionKind)?
		('operandsKind' operandsKind=CollectionKind)?
		('operator' operator=ArithmeticOperator)?
		('operands' '[' operands+=Expression ( "," operands+=Expression)* ']' )?
	'}';

StringConcatenation returns expressions::StringConcatenation:
	{expressions::StringConcatenation}
	'StringConcatenation'
	uniqueName=ID0?
	'{'
		('kind' kind=ExpressionKind)?
		('operandsKind' operandsKind=CollectionKind)?
		('operands' '[' operands+=Expression ( "," operands+=Expression)* ']' )?
	'}';

BooleanExpression returns expressions::BooleanExpression:
	{expressions::BooleanExpression}
	'BooleanExpression'
	uniqueName=ID0?
	'{'
		('kind' kind=ExpressionKind)?
		('operandsKind' operandsKind=CollectionKind)?
		('operator' operator=BooleanOperator)?
		('operands' '[' operands+=Expression ( "," operands+=Expression)* ']' )?
	'}';

BinaryExpression returns expressions::BinaryExpression:
	{expressions::BinaryExpression}
	'BinaryExpression'
	uniqueName=ID0?
	'{'
		('kind' kind=ExpressionKind)?
		('operandsKind' operandsKind=CollectionKind)?
		('operator' operator=BinaryOperator)?
		('operands' '[' operands+=Expression ( "," operands+=Expression)* ']' )?
	'}';

OperandExpression_Impl returns expressions::OperandExpression:
	{expressions::OperandExpression}
	'OperandExpression'
	uniqueName=ID0?
	'{'
		('kind' kind=ExpressionKind)?
		('operandsKind' operandsKind=CollectionKind)?
		('operands' '[' operands+=Expression ( "," operands+=Expression)* ']' )?
	'}';

Variable_Impl returns variable::Variable:
	{variable::Variable}
	'Variable'
	uniqueName=ID0?
	'{'
		('name' name=String0)?
		('availableInSourceCode' availableInSourceCode=BooleanObject)?
		('final' final=BooleanObject)?
		('type' type=[datatype::DataType|EString])?
		('annotations' '[' annotations+=Annotation ( "," annotations+=Annotation)* ']' )?
	'}';

ParameterVariable returns variable::ParameterVariable:
	{variable::ParameterVariable}
	'ParameterVariable'
	uniqueName=ID0?
	'{'
		('name' name=String0)?
		('availableInSourceCode' availableInSourceCode=BooleanObject)?
		('final' final=BooleanObject)?
		('type' type=[datatype::DataType|EString])?
		('annotations' '[' annotations+=Annotation ( "," annotations+=Annotation)* ']' )?
	'}';

LocalVariable returns variable::LocalVariable:
	{variable::LocalVariable}
	'LocalVariable'
	uniqueName=ID0?
	'{'
		('name' name=String0)?
		('availableInSourceCode' availableInSourceCode=BooleanObject)?
		('final' final=BooleanObject)?
		('type' type=[datatype::DataType|EString])?
		('annotations' '[' annotations+=Annotation ( "," annotations+=Annotation)* ']' )?
		('initialValue' initialValue=Expression)?
	'}';

InitializableVariable_Impl returns variable::InitializableVariable:
	{variable::InitializableVariable}
	'InitializableVariable'
	uniqueName=ID0?
	'{'
		('name' name=String0)?
		('availableInSourceCode' availableInSourceCode=BooleanObject)?
		('final' final=BooleanObject)?
		('type' type=[datatype::DataType|EString])?
		('annotations' '[' annotations+=Annotation ( "," annotations+=Annotation)* ']' )?
		('initialValue' initialValue=Expression)?
	'}';

enum ExpressionKind returns expressions::ExpressionKind:
				INFIX = 'INFIX' | UNARY = 'UNARY' | ANY = 'ANY';

enum ArithmeticOperator returns expressions::ArithmeticOperator:
				ADDITION = 'ADDITION' | MULTIPLICATION = 'MULTIPLICATION' | DIVIDE = 'DIVIDE' | SUBTRACT = 'SUBTRACT' | ANY = 'ANY';

enum BooleanOperator returns expressions::BooleanOperator:
				AND = 'AND' | OR = 'OR' | NEGATED = 'NEGATED' | ANY = 'ANY' | NOT_EQUALS = 'NOT_EQUALS';

enum BinaryOperator returns expressions::BinaryOperator:
				LEFT_SHIFT = 'LEFT_SHIFT' | RIGHT_SHIFT = 'RIGHT_SHIFT' | UNSIGNED_LEFT_SHIFT = 'UNSIGNED_LEFT_SHIFT' | UNSIGNED_RIGHT_SHIFT = 'UNSIGNED_RIGHT_SHIFT' | COMPLEMENT = 'COMPLEMENT' | ANY = 'ANY';

Block returns statements::Block:
	{statements::Block}
	'Block'
	uniqueName=ID0?
	'{'
		('statementsKind' statementsKind=CollectionKind)?
		('statements' '[' statements+=Statement ( "," statements+=Statement)* ']' )?
	'}' | SwitchCaseBlock;

Statement_Impl returns statements::Statement:
	{statements::Statement}
	'Statement'
	uniqueName=ID0?;

ControlFlowStatement returns statements::ControlFlowStatement:
	{statements::ControlFlowStatement}
	'ControlFlowStatement'
	uniqueName=ID0? | ConditionalControlFlowStatement | LoopStatement;

InstanceCreation returns statements::InstanceCreation:
	{statements::InstanceCreation}
	'InstanceCreation'
	uniqueName=ID0?
	'{'
		('argsKind' argsKind=CollectionKind)?
		('type' type=[datatype::ObjectType|EString])?
		('constructor' constructor=Constructor)?
		('args' '[' args+=Statement ( "," args+=Statement)* ']' )?
	'}';

SynchronizedBlock returns statements::SynchronizedBlock:
	{statements::SynchronizedBlock}
	'SynchronizedBlock'
	uniqueName=ID0?
	'{'
		('bodyStatements' '[' bodyStatements+=Statement ( "," bodyStatements+=Statement)* ']' )?
		('key' key=Statement)?
	'}';

ControlledAccessElement returns elements::ControlledAccessElement:
	{elements::ControlledAccessElement}
	uniqueName=ID0?
	'{'
		('visibility' visibility=Visibility)?
	'}';
	

ThrowStatement returns statements::ThrowStatement:
	{statements::ThrowStatement}
	'ThrowStatement'
	uniqueName=ID0?
	'{'
		('expression' expression=Expression)?
	'}';

EmptyStatement returns statements::EmptyStatement:
	{statements::EmptyStatement}
	'EmptyStatement'
	uniqueName=ID0?;

ReturnStatement returns statements::ReturnStatement:
	{statements::ReturnStatement}
	'ReturnStatement'
	uniqueName=ID0?
	'{'
		('expression' expression=Expression)?
	'}';

BreakStatement returns statements::BreakStatement:
	{statements::BreakStatement}
	'BreakStatement'
	uniqueName=ID0?;

ContinueStatement returns statements::ContinueStatement:
	{statements::ContinueStatement}
	'ContinueStatement'
	uniqueName=ID0?;

AssertStatement returns statements::AssertStatement:
	{statements::AssertStatement}
	'AssertStatement'
	uniqueName=ID0?
	'{'
		('expression' expression=Expression)?
		('message' message=Expression)?
	'}';

ExpressionStatement returns statements::ExpressionStatement:
	{statements::ExpressionStatement}
	'ExpressionStatement'
	uniqueName=ID0?
	'{'
		('expression' expression=Expression)?
	'}';

LabelStatement returns statements::LabelStatement:
	{statements::LabelStatement}
	'LabelStatement'
	uniqueName=ID0?
	'{'
		('name' name=EString)?
		('body' body=Statement)?
	'}';

Constructor returns method::Constructor:
	{method::Constructor}
	'Constructor'
	uniqueName=ID0?
	'{'
		('visibility' visibility=Visibility)?
		('paramsKind' paramsKind=CollectionKind)?
		('avaliableInSourceCode' avaliableInSourceCode=BooleanObject)?
		('thrownExceptions' '(' thrownExceptions+=[complexType::JClass|EString] ( "," thrownExceptions+=[complexType::JClass|EString])* ')' )?
		('annotations' '[' annotations+=Annotation ( "," annotations+=Annotation)* ']' )?
		('params' '[' params+=ParameterVariable ( "," params+=ParameterVariable)* ']' )?
		('body' body=Block)?
	'}';
	


EString returns ecore::EString:
	STRING | ID;

EnumConstant returns complexType::EnumConstant:
	{complexType::EnumConstant}
	'EnumConstant'
	uniqueName=ID0?
	'{'
		('name' name=String0)?
		('availableInSourceCode' availableInSourceCode=BooleanObject)?
		('argumentsKind' argumentsKind=CollectionKind)?
		('annotations' '[' annotations+=Annotation ( "," annotations+=Annotation)* ']' )?
		('arguments' '[' arguments+=Expression ( "," arguments+=Expression)* ']' )?
	'}';

AtomicFilter_Impl returns filters::AtomicFilter:
	'AtomicFilter'
	'{'
		negated?= 'not'?
		'targets' '(' targets+=[elements::Element|EString] ( "," targets+=[elements::Element|EString])* ')' 
	'}';

CompositeFilter returns filters::CompositeFilter:
	'CompositeFilter'
	'{'
		negated?= 'not'?
		('operator' operator=LogicOperator)?
		'filters' '[' filters+=Filter ( "," filters+=Filter)* ']' 
	'}';

PropertyFilter returns filters::PropertyFilter:
	'PropertyFilter'
	'{'
		negated?= 'not'?
		'targets' '(' targets+=[elements::Element|EString] ( "," targets+=[elements::Element|EString])* ')' 
	'}';

TemplateFilter_Impl returns filters::TemplateFilter:
	'TemplateFilter'
	'{'
		negated?= 'not'?
		'targets' '(' targets+=[elements::Element|EString] ( "," targets+=[elements::Element|EString])* ')' 
		'targetTemplate' targetTemplate=[elements::Element|EString]
		'context' context=Context
	'}';

SameNameFilter returns filters::SameNameFilter:
	'SameNameFilter'
	'{'
		negated?= 'not'?
		('ignoreCase' ignoreCase=Boolean)?
		'targets' '(' targets+=[elements::Element|EString] ( "," targets+=[elements::Element|EString])* ')' 
		('elements' '(' elements+=[namedElements::NamedElement|EString] ( "," elements+=[namedElements::NamedElement|EString])* ')' )?
	'}';

CountFilter returns filters::CountFilter:
	'CountFilter'
	'{'
		negated?= 'not'?
		('min' min=Int0)?
		('max' max=Int0)?
		'targets' '(' targets+=[elements::Element|EString] ( "," targets+=[elements::Element|EString])* ')' 
		('container' container=[elements::Element|EString])?
		'field' field=[elements::Element|EString]
		'context' '[' context+=Context ( "," context+=Context)* ']' 
	'}';

RegexMatch returns filters::RegexMatch:
	'RegexMatch'
	'{'
		negated?= 'not'?
		('regex' regex=String0)?
		'targets' '(' targets+=[elements::Element|EString] ( "," targets+=[elements::Element|EString])* ')' 
	'}';

ImplicityOperandFilter returns filters::ImplicityOperandFilter:
	'ImplicityOperandFilter'
	'{'
		negated?= 'not'?
		'targets' '(' targets+=[elements::Element|EString] ( "," targets+=[elements::Element|EString])* ')' 
		'targetTemplate' targetTemplate=[elements::Element|EString]
		'implicityOperand' implicityOperand=[elements::Element|EString]
		'expression' expression=[expressions::Expression|EString]
		'context' context=Context
	'}';

ImplicityContainerFilter returns filters::ImplicityContainerFilter:
	'ImplicityContainerFilter'
	'{'
		negated?= 'not'?
		'targets' '(' targets+=[elements::Element|EString] ( "," targets+=[elements::Element|EString])* ')' 
		'implicityContainer' implicityContainer=[elements::Element|EString]
		'implicityField' implicityField=[elements::Element|EString]
		'context' context=Context
	'}';

IsKindOfFilter returns filters::IsKindOfFilter:
	'IsKindOfFilter'
	'{'
		negated?= 'not'?
		'targets' '(' targets+=[elements::Element|EString] ( "," targets+=[elements::Element|EString])* ')' 
		'type' type=[datatype::DataType|EString]
		'context' context=Context
	'}';

SuperMethodClosureFilter returns filters::SuperMethodClosureFilter:
	'SuperMethodClosureFilter'
	'{'
		negated?= 'not'?
		'targets' '(' targets+=[elements::Element|EString] ( "," targets+=[elements::Element|EString])* ')' 
		'superMethod' superMethod=[method::Method|EString]
		'context' context=Context
	'}';

IsTypeOfFilter returns filters::IsTypeOfFilter:
	'IsTypeOfFilter'
	'{'
		negated?= 'not'?
		'targets' '(' targets+=[elements::Element|EString] ( "," targets+=[elements::Element|EString])* ')' 
		'type' type=[datatype::DataType|EString]
		'context' context=Context
	'}';

ChildClosureComplexTypeFilter returns filters::ChildClosureComplexTypeFilter:
	'ChildClosureComplexTypeFilter'
	'{'
		negated?= 'not'?
		'targets' '(' targets+=[elements::Element|EString] ( "," targets+=[elements::Element|EString])* ')' 
		'superComplexType' superComplexType=[complexType::ComplexType|EString]
		'childComplexType' childComplexType=[complexType::ComplexType|EString]
		'context' context=Context
	'}';

IsStringFilter returns filters::IsStringFilter:
	'IsStringFilter'
	'{'
		negated?= 'not'?
		'targets' '(' targets+=[elements::Element|EString] ( "," targets+=[elements::Element|EString])* ')' 
	'}';

FromClosureFilter returns filters::FromClosureFilter:
	'FromClosureFilter'
	'{'
		negated?= 'not'?
		'targets' '(' targets+=[elements::Element|EString] ( "," targets+=[elements::Element|EString])* ')' 
		'from' from=[statements::Statement|EString]
		('context' context=Context)?
	'}';

HasSuperClassFilter returns filters::HasSuperClassFilter:
	'HasSuperClassFilter'
	'{'
		negated?= 'not'?
		('includesTarget' includesTarget=Boolean)?
		'targets' '(' targets+=[elements::Element|EString] ( "," targets+=[elements::Element|EString])* ')' 
		('superClass' superClass=[complexType::JClass|EString])?
		('subClass' subClass=[complexType::JClass|EString])?
		('context' context=Context)?
	'}';

BlockLastStatementFilter returns filters::BlockLastStatementFilter:
	'BlockLastStatementFilter'
	'{'
		negated?= 'not'?
		'targets' '(' targets+=[elements::Element|EString] ( "," targets+=[elements::Element|EString])* ')' 
		('lastStatement' lastStatement=[statements::Statement|EString])?
		('context' context=Context)?
	'}';

HasSameReferenceFilter returns filters::HasSameReferenceFilter:
	'HasSameReferenceFilter'
	'{'
		negated?= 'not'?
		'targets' '(' targets+=[elements::Element|EString] ( "," targets+=[elements::Element|EString])* ')' 
	'}';

IsEmptyBlockFilter returns filters::IsEmptyBlockFilter:
	'IsEmptyBlockFilter'
	'{'
		negated?= 'not'?
		('allowEmptyStatement' allowEmptyStatement=Boolean)?
		('allowComments' allowComments=Boolean)?
		'targets' '(' targets+=[elements::Element|EString] ( "," targets+=[elements::Element|EString])* ')' 
	'}';

ImplicitContentsFilter returns filters::ImplicitContentsFilter:
	'ImplicitContentsFilter'
	'{'
		negated?= 'not'?
		'targets' '(' targets+=[elements::Element|EString] ( "," targets+=[elements::Element|EString])* ')' 
		('implicitField' implicitField=[elements::Element|EString])?
		('implicitContainer' implicitContainer=[elements::Element|EString])?
		('context' context=Context)?
	'}';

NamedElement_Impl returns namedElements::NamedElement:
	{namedElements::NamedElement}
	'NamedElement'
	uniqueName=ID0?
	'{'
		('name' name=String0)?
		('availableInSourceCode' availableInSourceCode=BooleanObject)?
		('annotations' '[' annotations+=Annotation ( "," annotations+=Annotation)* ']' )?
	'}';

Package returns namedElements::Package:
	{namedElements::Package}
	'Package'
	uniqueName=ID0?
	'{'
		('name' name=String0)?
		('availableInSourceCode' availableInSourceCode=BooleanObject)?
		('annotations' '[' annotations+=Annotation ( "," annotations+=Annotation)* ']' )?
		('declaredTypes' '[' declaredTypes+=TypeDeclaration ( "," declaredTypes+=TypeDeclaration)* ']' )?
	'}';

ComplexType_Impl returns complexType::ComplexType:
	{complexType::ComplexType}
	'ComplexType'
	uniqueName=ID0?
	'{'
		('fieldsKind' fieldsKind=CollectionKind)?
		('methodsKind' methodsKind=CollectionKind)?
		('fields' '[' fields+=FieldVariable ( "," fields+=FieldVariable)* ']' )?
		('methods' '[' methods+=Method ( "," methods+=Method)* ']' )?
	'}';

AnonymousClass returns complexType::AnonymousClass:
	{complexType::AnonymousClass}
	'AnonymousClass'
	uniqueName=ID0?
	'{'
		('fieldsKind' fieldsKind=CollectionKind)?
		('methodsKind' methodsKind=CollectionKind)?
		('type' type=[datatype::ObjectType|EString])?
		('fields' '[' fields+=FieldVariable ( "," fields+=FieldVariable)* ']' )?
		('methods' '[' methods+=Method ( "," methods+=Method)* ']' )?
	'}';
	
	
/*ADDED access elements and Blocks */

VariableAccess returns accesses::VariableAccess:
	{accesses::VariableAccess}
	'VariableAccess'
	uniqueName=ID0?
	'{'
		('variable' variable=[variable::Variable])?
	'}';
	
DataTypeAccess returns accesses::DataTypeAccess:
	{accesses::DataTypeAccess}
	'DataTypeAccess'
	uniqueName=ID0?
	'{'
		('DataType' datatype=[datatype::DataType])?
	'}';

Access_Impl returns accesses::Access:
	{accesses::Access}
	'Access'
	uniqueName=ID0?
	'{'
		('Expression' from=Expression)?
	'}';
	
SwitchCaseBlock returns controlFlow::SwitchCaseBlock:
	{controlFlow::SwitchCaseBlock}
	'SwitchCaseBlock'
	uniqueName=ID0?
	'{'
		('statementsKind' statementsKind=CollectionKind)?
		('default' default=EBoolean)?
		('statements' '[' statements+=Statement ( "," statements+=Statement)* ']' )?
	'}';
	
TryStatement returns tryCatch::TryStatement:
	{tryCatch::TryStatement}
	'TryStatement'
	uniqueName=ID0?
	'{'
		('catchClausesKind' catchClausesKind=CollectionKind)?
		('resourcesKind' resourcesKind=CollectionKind)?
		('finallyBlock' finallyBlock=Block)?
		('catchClauses' '[' catchClauses+=CatchClause ( "," catchClauses+=CatchClause)* ']' )?
		('resources' '[' resources+=Expression ( "," resources+=Expression)* ']' )?
		('tryBlock' tryBlock=Block)?
	'}'
;

CatchClause returns tryCatch::CatchClause:
	{tryCatch::CatchClause}
	'CatchClause'
	uniqueName=ID0?
	'{'
		('body' body=Block)?
		('variable' variable = ParameterVariable)?
		('handledExceptions' '(' handledExceptions+=[complexType::JClass|EString] ( "," handledExceptions+=[complexType::JClass|EString])* ')' )?
	'}'
;

Invocation returns invocations::Invocation:
	{invocations::Invocation}
	'Invocation'
	uniqueName=ID0?
	'{'
		('argsKind' argsKind=CollectionKind)?
		('method' method= [method::SimpleMethod])?
		('args' '[' args+=Expression ( "," args+=Expression)* ']' )?
		('typeArgs' '(' typeArgs+=[datatype::ObjectType|EString] ( "," typeArgs+=[datatype::ObjectType|EString])* ')' )?
		('typeArgsKind' typeArgsKind=CollectionKind)?
	'{' | MethodInvocation | ConstructorInvocation
	
;

MethodInvocation returns invocations::MethodInvocation:
	{invocations::MethodInvocation}
	'MethodInvocation'
	uniqueName=ID0?
	'{'
		('from' from = Expression)?
		('argsKind' argsKind=CollectionKind)?
		('method' method= [method::SimpleMethod])?
		('args' '[' args+=Expression ( "," args+=Expression)* ']' )?
		('typeArgs' '(' typeArgs+=[datatype::ObjectType|EString] ( "," typeArgs+=[datatype::ObjectType|EString])* ')' )?
		('typeArgsKind' typeArgsKind=CollectionKind)?
	'}'
;

ConstructorInvocation returns invocations::ConstructorInvocation:
	{invocations::ConstructorInvocation}
	'ConstructorInvocation'
	uniqueName=ID0?
	'{'
		('constructor' constructor = [method::Constructor])?
		('argsKind' argsKind=CollectionKind)?
		('method' method= [method::SimpleMethod])?
		('args' '[' args+=Expression ( "," args+=Expression)* ']' )?
		('typeArgs' '(' typeArgs+=[datatype::ObjectType|EString] ( "," typeArgs+=[datatype::ObjectType|EString])* ')' )?
		('typeArgsKind' typeArgsKind=CollectionKind)?
	'}'
;

SwitchStatement returns controlFlow::SwitchStatement:
	{controlFlow::SwitchStatement}
	'SwitchStatement'
	uniqueName=ID0?
	'{'
		('condition' condition= Expression)?
		('cases' '[' cases+=SwitchCaseBlock ( "," cases+=SwitchCaseBlock)* ']' )?
	'}'
;

IfStatement returns controlFlow::IfStatement:
	{controlFlow::IfStatement}
	'IfStatement'
	uniqueName=ID0?
	'{'
		('condition' condition= Expression)?
		('thenStatement' thenStatement= Statement)?
		('elseStatement' elseStatement= Statement)?
	'}'
;

LoopStatement returns controlFlow::LoopStatement:
	{controlFlow::LoopStatement}
	'LoopStatement'
	uniqueName=ID0?
	'{'
		('body' body= Statement)?
	'}' | WhileStatement | ForEachStatement
;

WhileStatement returns controlFlow::WhileStatement:
	{controlFlow::WhileStatement}
	'WhileStatement'
	uniqueName=ID0?
	'{'
		('body' body= Statement)?
	'}'
;

DoStatement returns controlFlow::DoStatement:
	{controlFlow::DoStatement}
	'DoStatement'
	uniqueName=ID0?
	'{'
		('condition' condition= Expression)?
		('body' body= Statement)?
	'}'
;

ForStatement returns controlFlow::ForStatement:
	{controlFlow::ForStatement}
	'ForStatement'
	uniqueName=ID0?
	'{'
		('condition' condition= Expression)?
		('body' body= Statement)?
		('initializers' '[' initializers+=Expression ( "," initializers+=Expression)* ']' )?
		('initializersKind' initializersKind= CollectionKind)?
		('updaters' '[' updaters+=Expression ( "," updaters+=Expression)* ']' )?
		('updatersKind' updatersKind= CollectionKind)?
	'}'
;

ForEachStatement returns controlFlow::ForEachStatement:
	{controlFlow::ForEachStatement}
	'ForEachStatement'
	uniqueName=ID0?
	'{'
		('body' body= Statement)?
		('expression' expression= LoopStatement)?
		('variable' variable= [variable::ParameterVariable])?
	'}'
;

ConditionalControlFlowStatement returns controlFlow::ConditionalControlFlowStatement:
	{controlFlow::ConditionalControlFlowStatement}
	'ConditionalControlFlowStatement'
	uniqueName=ID0?
	'{'
		('condition' condition= Expression)?
	'}' | SwitchStatement | IfStatement | DoStatement | ForStatement
;

ArrayCreation returns arrays::ArrayCreation:
	{arrays::ArrayCreation}
	'ArrayCreation'
	uniqueName=ID0?
	'{'
		('type' type= [datatype::ObjectType])?
		('initializer' initializer= ArrayInitializer)?
		('dimensions' '[' dimensions+=Expression ( "," dimensions+=Expression)* ']' )?
		('dimensionsKind' dimensionsKind= CollectionKind)?
	'}'
;

ArrayIndexesAccess returns arrays::ArrayIndexesAccess:
	{arrays::ArrayIndexesAccess}
	'ArrayIndexesAccess'
	uniqueName=ID0?
	'{'
		('indexes' '[' indexes+=Expression ( "," indexes+=Expression)* ']' )?
		('indexesKind' indexesKind= CollectionKind)?
	'}'
;

ArrayInitializer returns arrays::ArrayInitializer:
	{arrays::ArrayInitializer}
	'ArrayInitializer'
	uniqueName=ID0?
	'{'
		('values' '[' values+=Expression ( "," values+=Expression)* ']' )?
		('valuesKind' '[' valuesKind+=CollectionKind ( "," valuesKind+=CollectionKind)* ']' )?
	'}'
;

SimpleAssignment returns assignment::SimpleAssignment:
	{assignment::SimpleAssignment}
	'SimpleAssignment'
	uniqueName=ID0?
	'{'
		('operand' operand= Expression)?
	'}' | Assignment | UnaryAssignment
;

Assignment returns assignment::Assignment:
	{assignment::Assignment}
	'Assignment'
	uniqueName=ID0?
	'{'
		('operand' operand= Expression)?
		('operator' operator= AssignmentOperator)?
		('value' value= Expression)?
	'}'
;

UnaryAssignment returns assignment::UnaryAssignment:
	{assignment::UnaryAssignment}
	'UnaryAssignment'
	uniqueName=ID0?
	'{'
		('operand' operand= Expression)?
		('operator' operator= UnaryAssignmentOperator)?
		('kind' kind= UnaryAssignmentKind)?
	'}'
;

LiteralValue returns literals::LiteralValue:
	{literals::LiteralValue}
	'LiteralValue'
	uniqueName=ID0?
	'{'
		('value' value= EString)?
	'}' | BooleanLiteral | NumberLiteral | StringLiteral | CharacterLiteral | NullLiteral
;

NullLiteral returns literals::NullLiteral:
	{literals::NullLiteral}
	'NullLiteral'
	uniqueName=ID0?
	'{'
		('value' value= EString)?
	'}'
;

CharacterLiteral returns literals::CharacterLiteral:
	{literals::CharacterLiteral}
	'CharacterLiteral'
	uniqueName=ID0?
	'{'
		('value' value= EString)?
	'}'
;

StringLiteral returns literals::StringLiteral:
	{literals::StringLiteral}
	'StringLiteral'
	uniqueName=ID0?
	'{'
		('value' value= EString)?
	'}'
;

NumberLiteral returns literals::NumberLiteral:
	{literals::NumberLiteral}
	'NumberLiteral'
	uniqueName=ID0?
	'{'
		('value' value= EString)?
	'}'
;

BooleanLiteral returns literals::BooleanLiteral:
	{literals::BooleanLiteral}
	'BooleanLiteral'
	uniqueName=ID0?
	'{'
		('value' value= EString)?
	'}'
;

