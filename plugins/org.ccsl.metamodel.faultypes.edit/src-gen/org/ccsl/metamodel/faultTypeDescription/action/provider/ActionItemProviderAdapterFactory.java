/**
 */
package org.ccsl.metamodel.faultTypeDescription.action.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.ccsl.metamodel.faultTypeDescription.action.util.ActionAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ActionItemProviderAdapterFactory extends ActionAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection supportedTypes = new ArrayList();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ActionItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ccsl.metamodel.faultTypeDescription.action.DeleteAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeleteActionItemProvider deleteActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.ccsl.metamodel.faultTypeDescription.action.DeleteAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeleteActionAdapter() {
		if (deleteActionItemProvider == null) {
			deleteActionItemProvider = new DeleteActionItemProvider(this);
		}

		return deleteActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ccsl.metamodel.faultTypeDescription.action.MoveScopeUpAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MoveScopeUpActionItemProvider moveScopeUpActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.ccsl.metamodel.faultTypeDescription.action.MoveScopeUpAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMoveScopeUpActionAdapter() {
		if (moveScopeUpActionItemProvider == null) {
			moveScopeUpActionItemProvider = new MoveScopeUpActionItemProvider(this);
		}

		return moveScopeUpActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ccsl.metamodel.faultTypeDescription.action.DeleteInfixOperatorAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeleteInfixOperatorActionItemProvider deleteInfixOperatorActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.ccsl.metamodel.faultTypeDescription.action.DeleteInfixOperatorAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeleteInfixOperatorActionAdapter() {
		if (deleteInfixOperatorActionItemProvider == null) {
			deleteInfixOperatorActionItemProvider = new DeleteInfixOperatorActionItemProvider(this);
		}

		return deleteInfixOperatorActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ccsl.metamodel.faultTypeDescription.action.ChangeLiteralValueAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChangeLiteralValueActionItemProvider changeLiteralValueActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.ccsl.metamodel.faultTypeDescription.action.ChangeLiteralValueAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChangeLiteralValueActionAdapter() {
		if (changeLiteralValueActionItemProvider == null) {
			changeLiteralValueActionItemProvider = new ChangeLiteralValueActionItemProvider(this);
		}

		return changeLiteralValueActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ccsl.metamodel.faultTypeDescription.action.DeleteRandomStatementAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeleteRandomStatementActionItemProvider deleteRandomStatementActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.ccsl.metamodel.faultTypeDescription.action.DeleteRandomStatementAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeleteRandomStatementActionAdapter() {
		if (deleteRandomStatementActionItemProvider == null) {
			deleteRandomStatementActionItemProvider = new DeleteRandomStatementActionItemProvider(this);
		}

		return deleteRandomStatementActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ccsl.metamodel.faultTypeDescription.action.ReplaceVariableAccessAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReplaceVariableAccessActionItemProvider replaceVariableAccessActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.ccsl.metamodel.faultTypeDescription.action.ReplaceVariableAccessAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReplaceVariableAccessActionAdapter() {
		if (replaceVariableAccessActionItemProvider == null) {
			replaceVariableAccessActionItemProvider = new ReplaceVariableAccessActionItemProvider(this);
		}

		return replaceVariableAccessActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ccsl.metamodel.faultTypeDescription.action.ReplaceArithmeticOperatorAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReplaceArithmeticOperatorActionItemProvider replaceArithmeticOperatorActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.ccsl.metamodel.faultTypeDescription.action.ReplaceArithmeticOperatorAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReplaceArithmeticOperatorActionAdapter() {
		if (replaceArithmeticOperatorActionItemProvider == null) {
			replaceArithmeticOperatorActionItemProvider = new ReplaceArithmeticOperatorActionItemProvider(this);
		}

		return replaceArithmeticOperatorActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ccsl.metamodel.faultTypeDescription.action.ArithmeticOperatorMap} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArithmeticOperatorMapItemProvider arithmeticOperatorMapItemProvider;

	/**
	 * This creates an adapter for a {@link org.ccsl.metamodel.faultTypeDescription.action.ArithmeticOperatorMap}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArithmeticOperatorMapAdapter() {
		if (arithmeticOperatorMapItemProvider == null) {
			arithmeticOperatorMapItemProvider = new ArithmeticOperatorMapItemProvider(this);
		}

		return arithmeticOperatorMapItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (deleteActionItemProvider != null)
			deleteActionItemProvider.dispose();
		if (moveScopeUpActionItemProvider != null)
			moveScopeUpActionItemProvider.dispose();
		if (deleteInfixOperatorActionItemProvider != null)
			deleteInfixOperatorActionItemProvider.dispose();
		if (changeLiteralValueActionItemProvider != null)
			changeLiteralValueActionItemProvider.dispose();
		if (deleteRandomStatementActionItemProvider != null)
			deleteRandomStatementActionItemProvider.dispose();
		if (replaceVariableAccessActionItemProvider != null)
			replaceVariableAccessActionItemProvider.dispose();
		if (replaceArithmeticOperatorActionItemProvider != null)
			replaceArithmeticOperatorActionItemProvider.dispose();
		if (arithmeticOperatorMapItemProvider != null)
			arithmeticOperatorMapItemProvider.dispose();
	}

}
