/**
 */
package ccsl.functions.booleanFunctions.filters.provider;

import ccsl.functions.booleanFunctions.filters.util.FiltersAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class FiltersItemProviderAdapterFactory extends FiltersAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection supportedTypes = new ArrayList();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public FiltersItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.functions.booleanFunctions.filters.AtomicFilter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AtomicFilterItemProvider atomicFilterItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.functions.booleanFunctions.filters.AtomicFilter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createAtomicFilterAdapter() {
		if (atomicFilterItemProvider == null) {
			atomicFilterItemProvider = new AtomicFilterItemProvider(this);
		}

		return atomicFilterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.functions.booleanFunctions.filters.CompositeFilter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositeFilterItemProvider compositeFilterItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.functions.booleanFunctions.filters.CompositeFilter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCompositeFilterAdapter() {
		if (compositeFilterItemProvider == null) {
			compositeFilterItemProvider = new CompositeFilterItemProvider(this);
		}

		return compositeFilterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.functions.booleanFunctions.filters.PropertyFilter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyFilterItemProvider propertyFilterItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.functions.booleanFunctions.filters.PropertyFilter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createPropertyFilterAdapter() {
		if (propertyFilterItemProvider == null) {
			propertyFilterItemProvider = new PropertyFilterItemProvider(this);
		}

		return propertyFilterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.functions.booleanFunctions.filters.TemplateFilter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemplateFilterItemProvider templateFilterItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.functions.booleanFunctions.filters.TemplateFilter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createTemplateFilterAdapter() {
		if (templateFilterItemProvider == null) {
			templateFilterItemProvider = new TemplateFilterItemProvider(this);
		}

		return templateFilterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.functions.booleanFunctions.filters.SameNameFilter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SameNameFilterItemProvider sameNameFilterItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.functions.booleanFunctions.filters.SameNameFilter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createSameNameFilterAdapter() {
		if (sameNameFilterItemProvider == null) {
			sameNameFilterItemProvider = new SameNameFilterItemProvider(this);
		}

		return sameNameFilterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.functions.booleanFunctions.filters.CountFilter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CountFilterItemProvider countFilterItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.functions.booleanFunctions.filters.CountFilter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCountFilterAdapter() {
		if (countFilterItemProvider == null) {
			countFilterItemProvider = new CountFilterItemProvider(this);
		}

		return countFilterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.functions.booleanFunctions.filters.RegexMatch} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RegexMatchItemProvider regexMatchItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.functions.booleanFunctions.filters.RegexMatch}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createRegexMatchAdapter() {
		if (regexMatchItemProvider == null) {
			regexMatchItemProvider = new RegexMatchItemProvider(this);
		}

		return regexMatchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.functions.booleanFunctions.filters.ImplicityOperandFilter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImplicityOperandFilterItemProvider implicityOperandFilterItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.functions.booleanFunctions.filters.ImplicityOperandFilter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createImplicityOperandFilterAdapter() {
		if (implicityOperandFilterItemProvider == null) {
			implicityOperandFilterItemProvider = new ImplicityOperandFilterItemProvider(this);
		}

		return implicityOperandFilterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.functions.booleanFunctions.filters.ImplicityContainerFilter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImplicityContainerFilterItemProvider implicityContainerFilterItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.functions.booleanFunctions.filters.ImplicityContainerFilter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createImplicityContainerFilterAdapter() {
		if (implicityContainerFilterItemProvider == null) {
			implicityContainerFilterItemProvider = new ImplicityContainerFilterItemProvider(this);
		}

		return implicityContainerFilterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.functions.booleanFunctions.filters.IsKindOfFilter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IsKindOfFilterItemProvider isKindOfFilterItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.functions.booleanFunctions.filters.IsKindOfFilter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createIsKindOfFilterAdapter() {
		if (isKindOfFilterItemProvider == null) {
			isKindOfFilterItemProvider = new IsKindOfFilterItemProvider(this);
		}

		return isKindOfFilterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.functions.booleanFunctions.filters.SuperMethodClosureFilter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SuperMethodClosureFilterItemProvider superMethodClosureFilterItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.functions.booleanFunctions.filters.SuperMethodClosureFilter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createSuperMethodClosureFilterAdapter() {
		if (superMethodClosureFilterItemProvider == null) {
			superMethodClosureFilterItemProvider = new SuperMethodClosureFilterItemProvider(this);
		}

		return superMethodClosureFilterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.functions.booleanFunctions.filters.IsTypeOfFilter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IsTypeOfFilterItemProvider isTypeOfFilterItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.functions.booleanFunctions.filters.IsTypeOfFilter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createIsTypeOfFilterAdapter() {
		if (isTypeOfFilterItemProvider == null) {
			isTypeOfFilterItemProvider = new IsTypeOfFilterItemProvider(this);
		}

		return isTypeOfFilterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.functions.booleanFunctions.filters.ChildClosureComplexTypeFilter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChildClosureComplexTypeFilterItemProvider childClosureComplexTypeFilterItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.functions.booleanFunctions.filters.ChildClosureComplexTypeFilter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createChildClosureComplexTypeFilterAdapter() {
		if (childClosureComplexTypeFilterItemProvider == null) {
			childClosureComplexTypeFilterItemProvider = new ChildClosureComplexTypeFilterItemProvider(this);
		}

		return childClosureComplexTypeFilterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.functions.booleanFunctions.filters.IsStringFilter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IsStringFilterItemProvider isStringFilterItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.functions.booleanFunctions.filters.IsStringFilter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createIsStringFilterAdapter() {
		if (isStringFilterItemProvider == null) {
			isStringFilterItemProvider = new IsStringFilterItemProvider(this);
		}

		return isStringFilterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.functions.booleanFunctions.filters.EquationFilter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EquationFilterItemProvider equationFilterItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.functions.booleanFunctions.filters.EquationFilter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEquationFilterAdapter() {
		if (equationFilterItemProvider == null) {
			equationFilterItemProvider = new EquationFilterItemProvider(this);
		}

		return equationFilterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.functions.booleanFunctions.filters.FromClosureFilter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FromClosureFilterItemProvider fromClosureFilterItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.functions.booleanFunctions.filters.FromClosureFilter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createFromClosureFilterAdapter() {
		if (fromClosureFilterItemProvider == null) {
			fromClosureFilterItemProvider = new FromClosureFilterItemProvider(this);
		}

		return fromClosureFilterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.functions.booleanFunctions.filters.HasSuperClassFilter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HasSuperClassFilterItemProvider hasSuperClassFilterItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.functions.booleanFunctions.filters.HasSuperClassFilter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createHasSuperClassFilterAdapter() {
		if (hasSuperClassFilterItemProvider == null) {
			hasSuperClassFilterItemProvider = new HasSuperClassFilterItemProvider(this);
		}

		return hasSuperClassFilterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.functions.booleanFunctions.filters.BlockLastStatementFilter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BlockLastStatementFilterItemProvider blockLastStatementFilterItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.functions.booleanFunctions.filters.BlockLastStatementFilter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createBlockLastStatementFilterAdapter() {
		if (blockLastStatementFilterItemProvider == null) {
			blockLastStatementFilterItemProvider = new BlockLastStatementFilterItemProvider(this);
		}

		return blockLastStatementFilterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.functions.booleanFunctions.filters.HasSameReferenceFilter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HasSameReferenceFilterItemProvider hasSameReferenceFilterItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.functions.booleanFunctions.filters.HasSameReferenceFilter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createHasSameReferenceFilterAdapter() {
		if (hasSameReferenceFilterItemProvider == null) {
			hasSameReferenceFilterItemProvider = new HasSameReferenceFilterItemProvider(this);
		}

		return hasSameReferenceFilterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.functions.booleanFunctions.filters.IsEmptyBlockFilter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IsEmptyBlockFilterItemProvider isEmptyBlockFilterItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.functions.booleanFunctions.filters.IsEmptyBlockFilter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createIsEmptyBlockFilterAdapter() {
		if (isEmptyBlockFilterItemProvider == null) {
			isEmptyBlockFilterItemProvider = new IsEmptyBlockFilterItemProvider(this);
		}

		return isEmptyBlockFilterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.functions.booleanFunctions.filters.ImplicitContentsFilter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImplicitContentsFilterItemProvider implicitContentsFilterItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.functions.booleanFunctions.filters.ImplicitContentsFilter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createImplicitContentsFilterAdapter() {
		if (implicitContentsFilterItemProvider == null) {
			implicitContentsFilterItemProvider = new ImplicitContentsFilterItemProvider(this);
		}

		return implicitContentsFilterItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (atomicFilterItemProvider != null)
			atomicFilterItemProvider.dispose();
		if (compositeFilterItemProvider != null)
			compositeFilterItemProvider.dispose();
		if (propertyFilterItemProvider != null)
			propertyFilterItemProvider.dispose();
		if (templateFilterItemProvider != null)
			templateFilterItemProvider.dispose();
		if (sameNameFilterItemProvider != null)
			sameNameFilterItemProvider.dispose();
		if (countFilterItemProvider != null)
			countFilterItemProvider.dispose();
		if (regexMatchItemProvider != null)
			regexMatchItemProvider.dispose();
		if (implicityOperandFilterItemProvider != null)
			implicityOperandFilterItemProvider.dispose();
		if (implicityContainerFilterItemProvider != null)
			implicityContainerFilterItemProvider.dispose();
		if (isKindOfFilterItemProvider != null)
			isKindOfFilterItemProvider.dispose();
		if (superMethodClosureFilterItemProvider != null)
			superMethodClosureFilterItemProvider.dispose();
		if (isTypeOfFilterItemProvider != null)
			isTypeOfFilterItemProvider.dispose();
		if (childClosureComplexTypeFilterItemProvider != null)
			childClosureComplexTypeFilterItemProvider.dispose();
		if (isStringFilterItemProvider != null)
			isStringFilterItemProvider.dispose();
		if (equationFilterItemProvider != null)
			equationFilterItemProvider.dispose();
		if (fromClosureFilterItemProvider != null)
			fromClosureFilterItemProvider.dispose();
		if (hasSuperClassFilterItemProvider != null)
			hasSuperClassFilterItemProvider.dispose();
		if (blockLastStatementFilterItemProvider != null)
			blockLastStatementFilterItemProvider.dispose();
		if (hasSameReferenceFilterItemProvider != null)
			hasSameReferenceFilterItemProvider.dispose();
		if (isEmptyBlockFilterItemProvider != null)
			isEmptyBlockFilterItemProvider.dispose();
		if (implicitContentsFilterItemProvider != null)
			implicitContentsFilterItemProvider.dispose();
	}

}
