/**
 */
package ccsl.elements.namedElements.complexType.provider;

import ccsl.elements.namedElements.complexType.util.ComplexTypeAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ComplexTypeItemProviderAdapterFactory extends ComplexTypeAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection supportedTypes = new ArrayList();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComplexTypeItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.namedElements.complexType.JInterface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JInterfaceItemProvider jInterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.namedElements.complexType.JInterface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createJInterfaceAdapter() {
		if (jInterfaceItemProvider == null) {
			jInterfaceItemProvider = new JInterfaceItemProvider(this);
		}

		return jInterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.namedElements.complexType.AnonymousClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnonymousClassItemProvider anonymousClassItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.namedElements.complexType.AnonymousClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createAnonymousClassAdapter() {
		if (anonymousClassItemProvider == null) {
			anonymousClassItemProvider = new AnonymousClassItemProvider(this);
		}

		return anonymousClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.namedElements.complexType.JClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JClassItemProvider jClassItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.namedElements.complexType.JClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createJClassAdapter() {
		if (jClassItemProvider == null) {
			jClassItemProvider = new JClassItemProvider(this);
		}

		return jClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.namedElements.complexType.TypeDeclaration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeDeclarationItemProvider typeDeclarationItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.namedElements.complexType.TypeDeclaration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createTypeDeclarationAdapter() {
		if (typeDeclarationItemProvider == null) {
			typeDeclarationItemProvider = new TypeDeclarationItemProvider(this);
		}

		return typeDeclarationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.namedElements.complexType.ComplexType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComplexTypeItemProvider complexTypeItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.namedElements.complexType.ComplexType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createComplexTypeAdapter() {
		if (complexTypeItemProvider == null) {
			complexTypeItemProvider = new ComplexTypeItemProvider(this);
		}

		return complexTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.namedElements.complexType.AnnotationType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnnotationTypeItemProvider annotationTypeItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.namedElements.complexType.AnnotationType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createAnnotationTypeAdapter() {
		if (annotationTypeItemProvider == null) {
			annotationTypeItemProvider = new AnnotationTypeItemProvider(this);
		}

		return annotationTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.namedElements.complexType.AnnotationField} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnnotationFieldItemProvider annotationFieldItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.namedElements.complexType.AnnotationField}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createAnnotationFieldAdapter() {
		if (annotationFieldItemProvider == null) {
			annotationFieldItemProvider = new AnnotationFieldItemProvider(this);
		}

		return annotationFieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.namedElements.complexType.JEnum} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JEnumItemProvider jEnumItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.namedElements.complexType.JEnum}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createJEnumAdapter() {
		if (jEnumItemProvider == null) {
			jEnumItemProvider = new JEnumItemProvider(this);
		}

		return jEnumItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.namedElements.complexType.ComplexTypeDeclaration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComplexTypeDeclarationItemProvider complexTypeDeclarationItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.namedElements.complexType.ComplexTypeDeclaration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createComplexTypeDeclarationAdapter() {
		if (complexTypeDeclarationItemProvider == null) {
			complexTypeDeclarationItemProvider = new ComplexTypeDeclarationItemProvider(this);
		}

		return complexTypeDeclarationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.namedElements.complexType.ConstructComplexTypeDeclaration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstructComplexTypeDeclarationItemProvider constructComplexTypeDeclarationItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.namedElements.complexType.ConstructComplexTypeDeclaration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createConstructComplexTypeDeclarationAdapter() {
		if (constructComplexTypeDeclarationItemProvider == null) {
			constructComplexTypeDeclarationItemProvider = new ConstructComplexTypeDeclarationItemProvider(this);
		}

		return constructComplexTypeDeclarationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.namedElements.complexType.EnumConstant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumConstantItemProvider enumConstantItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.namedElements.complexType.EnumConstant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEnumConstantAdapter() {
		if (enumConstantItemProvider == null) {
			enumConstantItemProvider = new EnumConstantItemProvider(this);
		}

		return enumConstantItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (jInterfaceItemProvider != null)
			jInterfaceItemProvider.dispose();
		if (anonymousClassItemProvider != null)
			anonymousClassItemProvider.dispose();
		if (jClassItemProvider != null)
			jClassItemProvider.dispose();
		if (typeDeclarationItemProvider != null)
			typeDeclarationItemProvider.dispose();
		if (complexTypeItemProvider != null)
			complexTypeItemProvider.dispose();
		if (annotationTypeItemProvider != null)
			annotationTypeItemProvider.dispose();
		if (annotationFieldItemProvider != null)
			annotationFieldItemProvider.dispose();
		if (jEnumItemProvider != null)
			jEnumItemProvider.dispose();
		if (complexTypeDeclarationItemProvider != null)
			complexTypeDeclarationItemProvider.dispose();
		if (constructComplexTypeDeclarationItemProvider != null)
			constructComplexTypeDeclarationItemProvider.dispose();
		if (enumConstantItemProvider != null)
			enumConstantItemProvider.dispose();
	}

}
