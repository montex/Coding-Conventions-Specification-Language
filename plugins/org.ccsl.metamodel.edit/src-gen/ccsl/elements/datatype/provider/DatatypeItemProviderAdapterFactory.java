/**
 */
package ccsl.elements.datatype.provider;

import ccsl.elements.datatype.util.DatatypeAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DatatypeItemProviderAdapterFactory extends DatatypeAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection supportedTypes = new ArrayList();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DatatypeItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.datatype.DataType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataTypeItemProvider dataTypeItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.datatype.DataType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createDataTypeAdapter() {
		if (dataTypeItemProvider == null) {
			dataTypeItemProvider = new DataTypeItemProvider(this);
		}

		return dataTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.datatype.PrimitiveType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrimitiveTypeItemProvider primitiveTypeItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.datatype.PrimitiveType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createPrimitiveTypeAdapter() {
		if (primitiveTypeItemProvider == null) {
			primitiveTypeItemProvider = new PrimitiveTypeItemProvider(this);
		}

		return primitiveTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.datatype.BooleanPrimitiveType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanPrimitiveTypeItemProvider booleanPrimitiveTypeItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.datatype.BooleanPrimitiveType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createBooleanPrimitiveTypeAdapter() {
		if (booleanPrimitiveTypeItemProvider == null) {
			booleanPrimitiveTypeItemProvider = new BooleanPrimitiveTypeItemProvider(this);
		}

		return booleanPrimitiveTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.datatype.ShortPrimitiveType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ShortPrimitiveTypeItemProvider shortPrimitiveTypeItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.datatype.ShortPrimitiveType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createShortPrimitiveTypeAdapter() {
		if (shortPrimitiveTypeItemProvider == null) {
			shortPrimitiveTypeItemProvider = new ShortPrimitiveTypeItemProvider(this);
		}

		return shortPrimitiveTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.datatype.ObjectType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObjectTypeItemProvider objectTypeItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.datatype.ObjectType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createObjectTypeAdapter() {
		if (objectTypeItemProvider == null) {
			objectTypeItemProvider = new ObjectTypeItemProvider(this);
		}

		return objectTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.datatype.ParameterizedType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterizedTypeItemProvider parameterizedTypeItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.datatype.ParameterizedType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createParameterizedTypeAdapter() {
		if (parameterizedTypeItemProvider == null) {
			parameterizedTypeItemProvider = new ParameterizedTypeItemProvider(this);
		}

		return parameterizedTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.datatype.IntPrimitiveType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntPrimitiveTypeItemProvider intPrimitiveTypeItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.datatype.IntPrimitiveType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createIntPrimitiveTypeAdapter() {
		if (intPrimitiveTypeItemProvider == null) {
			intPrimitiveTypeItemProvider = new IntPrimitiveTypeItemProvider(this);
		}

		return intPrimitiveTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.datatype.ArrayType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArrayTypeItemProvider arrayTypeItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.datatype.ArrayType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createArrayTypeAdapter() {
		if (arrayTypeItemProvider == null) {
			arrayTypeItemProvider = new ArrayTypeItemProvider(this);
		}

		return arrayTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.datatype.VoidType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VoidTypeItemProvider voidTypeItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.datatype.VoidType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createVoidTypeAdapter() {
		if (voidTypeItemProvider == null) {
			voidTypeItemProvider = new VoidTypeItemProvider(this);
		}

		return voidTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.datatype.TypeParameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeParameterItemProvider typeParameterItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.datatype.TypeParameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createTypeParameterAdapter() {
		if (typeParameterItemProvider == null) {
			typeParameterItemProvider = new TypeParameterItemProvider(this);
		}

		return typeParameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.datatype.WildCardType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WildCardTypeItemProvider wildCardTypeItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.datatype.WildCardType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createWildCardTypeAdapter() {
		if (wildCardTypeItemProvider == null) {
			wildCardTypeItemProvider = new WildCardTypeItemProvider(this);
		}

		return wildCardTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.datatype.BytePrimitiveType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BytePrimitiveTypeItemProvider bytePrimitiveTypeItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.datatype.BytePrimitiveType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createBytePrimitiveTypeAdapter() {
		if (bytePrimitiveTypeItemProvider == null) {
			bytePrimitiveTypeItemProvider = new BytePrimitiveTypeItemProvider(this);
		}

		return bytePrimitiveTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.datatype.CharPrimitiveType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CharPrimitiveTypeItemProvider charPrimitiveTypeItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.datatype.CharPrimitiveType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCharPrimitiveTypeAdapter() {
		if (charPrimitiveTypeItemProvider == null) {
			charPrimitiveTypeItemProvider = new CharPrimitiveTypeItemProvider(this);
		}

		return charPrimitiveTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.datatype.DoublePrimitiveType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DoublePrimitiveTypeItemProvider doublePrimitiveTypeItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.datatype.DoublePrimitiveType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createDoublePrimitiveTypeAdapter() {
		if (doublePrimitiveTypeItemProvider == null) {
			doublePrimitiveTypeItemProvider = new DoublePrimitiveTypeItemProvider(this);
		}

		return doublePrimitiveTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.datatype.FloatPrimitiveType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FloatPrimitiveTypeItemProvider floatPrimitiveTypeItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.datatype.FloatPrimitiveType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createFloatPrimitiveTypeAdapter() {
		if (floatPrimitiveTypeItemProvider == null) {
			floatPrimitiveTypeItemProvider = new FloatPrimitiveTypeItemProvider(this);
		}

		return floatPrimitiveTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.datatype.LongPrimitiveType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LongPrimitiveTypeItemProvider longPrimitiveTypeItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.datatype.LongPrimitiveType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createLongPrimitiveTypeAdapter() {
		if (longPrimitiveTypeItemProvider == null) {
			longPrimitiveTypeItemProvider = new LongPrimitiveTypeItemProvider(this);
		}

		return longPrimitiveTypeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (dataTypeItemProvider != null)
			dataTypeItemProvider.dispose();
		if (primitiveTypeItemProvider != null)
			primitiveTypeItemProvider.dispose();
		if (booleanPrimitiveTypeItemProvider != null)
			booleanPrimitiveTypeItemProvider.dispose();
		if (shortPrimitiveTypeItemProvider != null)
			shortPrimitiveTypeItemProvider.dispose();
		if (objectTypeItemProvider != null)
			objectTypeItemProvider.dispose();
		if (parameterizedTypeItemProvider != null)
			parameterizedTypeItemProvider.dispose();
		if (intPrimitiveTypeItemProvider != null)
			intPrimitiveTypeItemProvider.dispose();
		if (arrayTypeItemProvider != null)
			arrayTypeItemProvider.dispose();
		if (voidTypeItemProvider != null)
			voidTypeItemProvider.dispose();
		if (typeParameterItemProvider != null)
			typeParameterItemProvider.dispose();
		if (wildCardTypeItemProvider != null)
			wildCardTypeItemProvider.dispose();
		if (bytePrimitiveTypeItemProvider != null)
			bytePrimitiveTypeItemProvider.dispose();
		if (charPrimitiveTypeItemProvider != null)
			charPrimitiveTypeItemProvider.dispose();
		if (doublePrimitiveTypeItemProvider != null)
			doublePrimitiveTypeItemProvider.dispose();
		if (floatPrimitiveTypeItemProvider != null)
			floatPrimitiveTypeItemProvider.dispose();
		if (longPrimitiveTypeItemProvider != null)
			longPrimitiveTypeItemProvider.dispose();
	}

}
